{"version":3,"sources":["../../../node_modules/delegate-it/delegate.js","../../../node_modules/delegate-it/one-event.js","../../../node_modules/delegate-it/index.js","../src/index.ts","../src/helpers/classify.ts","../src/helpers/getCurrentUrl.ts","../src/helpers/createHistoryRecord.ts","../src/helpers/updateHistoryRecord.ts","../src/helpers/delegateEvent.ts","../src/helpers/Location.ts","../src/helpers/matchPath.ts","../src/modules/Cache.ts","../src/utils/index.ts","../src/modules/Classes.ts","../src/modules/Visit.ts","../src/modules/Hooks.ts","../src/modules/getAnchorElement.ts","../src/modules/awaitAnimations.ts","../src/modules/navigate.ts","../src/modules/fetchPage.ts","../src/modules/animatePageOut.ts","../src/modules/replaceContent.ts","../src/modules/scrollToContent.ts","../src/modules/animatePageIn.ts","../src/modules/renderPage.ts","../src/modules/plugins.ts","../src/modules/resolveUrl.ts","../src/Swup.ts","../src/versionSatisfies.ts","../src/pluginRequirements.ts","../src/index.js","swup_import.js"],"names":["ledger","WeakMap","editLedger","wanted","baseElement","callback","setup","has","elementMap","get","set","setups","Set","existed","add","delete","safeClosest","event","selector","target","Text","parentElement","Element","currentTarget","closest","contains","delegate","type","options","signal","base","document","aborted","once","nativeListenerOptions","Document","documentElement","capture","Boolean","listenerFn","delegateTarget","delegateEvent","Object","assign","call","removeEventListener","JSON","stringify","isAlreadyListening","addEventListener","_default","exports","default","_delegate","_interopRequireDefault","require","obj","__esModule","oneEvent","Promise","resolve","undefined","_interopRequireWildcard","keys","forEach","key","prototype","hasOwnProperty","_exportNames","defineProperty","enumerable","_oneEvent","_getRequireWildcardCache","nodeInterop","cacheBabelInterop","cacheNodeInterop","cache","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","desc","classify","text","fallback","String","toLowerCase","replace","getCurrentUrl","_temp","hash","location","pathname","search","createHistoryRecord","url","customData","data","random","Math","source","history","pushState","updateHistoryRecord","state","replaceState","controller","AbortController","destroy","abort","Location","constructor","baseURI","toString","this","el","href","getAttribute","URL","matchPath","path","match","error","Error","Cache","swup","pages","Map","size","all","copy","page","result","hooks","callSync","update","payload","clear","prune","predicate","urlToResolve","fromUrl","resolveUrl","query","context","querySelector","queryAll","Array","from","querySelectorAll","nextTick","requestAnimationFrame","isPromise","then","runAsPromise","func","args","reject","forceReflow","element","body","offsetHeight","escapeCssIdentifier","ident","window","CSS","escape","toMs","s","Number","slice","Classes","swupClasses","selectors","scope","visit","animation","containers","isArray","join","targets","trim","classList","arguments","remove","className","split","filter","c","isSwupClass","some","startsWith","createVisit","_ref","to","currentPageUrl","id","animate","wait","name","animationScope","animationSelector","trigger","read","write","action","popstate","direction","scroll","reset","_iteratorSymbol","Symbol","iterator","pact","value","_Pact","o","_settle","bind","v","observer","onFulfilled","onRejected","e","_this","_isSettledPact","thenable","Hooks","registry","init","hook","create","exists","console","on","handler","warn","registration","off","before","defaultHandler","getHandlers","after","run","dispatchDomEvent","runSync","registrations","_this2","results","check","step","_cycle","next","done","return","_fixup","TypeError","values","i","length","array","_forTo","_forOf","_ref2","push","found","replaced","sort","sortRegistrations","_ref3","_ref4","T","_ref5","index","createDefaultHandler","a","b","priority","dispatchEvent","CustomEvent","detail","getAnchorElement","charAt","substring","decoded","decodeURIComponent","getElementById","awaitAnimations","elements","animatedElements","awaitedAnimations","map","propCount","expectedType","styles","getComputedStyle","transitionDelays","getStyleProperties","TRANSITION","transitionDurations","transitionTimeout","calculateTimeout","animationDelays","ANIMATION","animationDurations","animationTimeout","timeout","max","getTransitionInfo","endEvent","startTime","performance","now","propsTransitioned","end","onEnd","includes","isTransitionOrAnimationEvent","elapsedTime","setTimeout","awaitAnimationsOnElement","delays","durations","concat","duration","performNavigation","referrer","classes","_temp2","animationPromise","animatePageOut","pagePromise","renderPage","animatePageIn","_temp3","_this$fetchPage","cachedPage","fetchPage","newUrl","currentHistoryIndex","html","_catch","skipPopStateHandling","go","navigate","shouldIgnoreVisit","headers","requestHeaders","fetch","response","status","responseUrl","FetchError","finalUrl","method","message","details","super","_exit","_result","skip","replaceContent","incomingDocument","DOMParser","parseFromString","title","innerText","persistedElements","currentEl","incomingEl","replaceWith","existing","replacement","scrollToContent","behavior","scrollTarget","scrolled","anchor","scrollIntoView","scrollTo","top","left","isSameResolvedUrl","use","plugin","maybeInvalidPlugin","isSwupPlugin","_checkRequirements","_beforeMount","mount","plugins","unuse","pluginOrName","findPlugin","unmount","_afterUnmount","p","find","url1","url2","defaults","animateHistoryBrowsing","ignoreVisit","linkSelector","linkToSelf","Accept","Swup","version","clickDelegate","log","handleLinkClick","handlePopState","checkRequirements","enable","scrollRestoration","origin","triggerWillOpenNewWindow","fromElement","metaKey","ctrlKey","shiftKey","altKey","button","preventDefault","triggerEl","matches","normalizeVersion","segment","parseInt","SwupPlugin","requires","handlersToUnregister","unregister","entries","dependency","versions","checkDependencyVersion","requirements","getInstalledDependencyVersion","installed","every","required","comparator","comparisonResult","comparators","r","localeCompare","numeric","requirement","SwupScriptsPlugin","head","optin","runScripts","getScope","scripts","script","runScript","createElement","attributes","setAttribute","textContent","Plugin","_swup","_scriptsPlugin"],"mappings":"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","file":"swup_import.js","sourceRoot":"../js/pages/projects","sourcesContent":["/** Keeps track of raw listeners added to the base elements to avoid duplication */\nconst ledger = new WeakMap();\nfunction editLedger(wanted, baseElement, callback, setup) {\n    if (!wanted && !ledger.has(baseElement)) {\n        return false;\n    }\n    const elementMap = ledger.get(baseElement)\n        ?? new WeakMap();\n    ledger.set(baseElement, elementMap);\n    const setups = elementMap.get(callback) ?? new Set();\n    elementMap.set(callback, setups);\n    const existed = setups.has(setup);\n    if (wanted) {\n        setups.add(setup);\n    }\n    else {\n        setups.delete(setup);\n    }\n    return existed && wanted;\n}\nfunction safeClosest(event, selector) {\n    let target = event.target;\n    if (target instanceof Text) {\n        target = target.parentElement;\n    }\n    if (target instanceof Element && event.currentTarget instanceof Element) {\n        // `.closest()` may match ancestors of `currentTarget` but we only need its children\n        const closest = target.closest(selector);\n        if (closest && event.currentTarget.contains(closest)) {\n            return closest;\n        }\n    }\n}\n// This type isn't exported as a declaration, so it needs to be duplicated above\nfunction delegate(selector, type, callback, options = {}) {\n    const { signal, base = document } = options;\n    if (signal?.aborted) {\n        return;\n    }\n    // Don't pass `once` to `addEventListener` because it needs to be handled in `delegate-it`\n    const { once, ...nativeListenerOptions } = options;\n    // `document` should never be the base, it's just an easy way to define \"global event listeners\"\n    const baseElement = base instanceof Document ? base.documentElement : base;\n    // Handle the regular Element usage\n    const capture = Boolean(typeof options === 'object' ? options.capture : options);\n    const listenerFn = (event) => {\n        const delegateTarget = safeClosest(event, selector);\n        if (delegateTarget) {\n            const delegateEvent = Object.assign(event, { delegateTarget });\n            callback.call(baseElement, delegateEvent);\n            if (once) {\n                baseElement.removeEventListener(type, listenerFn, nativeListenerOptions);\n                editLedger(false, baseElement, callback, setup);\n            }\n        }\n    };\n    const setup = JSON.stringify({ selector, type, capture });\n    const isAlreadyListening = editLedger(true, baseElement, callback, setup);\n    if (!isAlreadyListening) {\n        baseElement.addEventListener(type, listenerFn, nativeListenerOptions);\n    }\n    signal?.addEventListener('abort', () => {\n        editLedger(false, baseElement, callback, setup);\n    });\n}\nexport default delegate;\n","import delegate from './delegate.js';\n// This type isn't exported as a declaration, so it needs to be duplicated above\nasync function oneEvent(selector, type, options = {}) {\n    return new Promise(resolve => {\n        options.once = true;\n        if (options.signal?.aborted) {\n            resolve(undefined);\n        }\n        options.signal?.addEventListener('abort', () => {\n            resolve(undefined);\n        });\n        delegate(selector, type, \n        // @ts-expect-error Seems to work fine\n        resolve, options);\n    });\n}\nexport default oneEvent;\n","export * from './delegate.js';\nexport { default } from './delegate.js';\nexport { default as oneEvent } from './one-event.js';\n","/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\" } = options;\n  const defaultPattern = `[^${escapeString(options.delimiter || \"/#?\")}]+?`;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || defaultPattern,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? defaultPattern : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {}\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map((token) => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {}\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function (pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map((value) => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\",\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n): RegExp {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {}\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x,\n    delimiter = \"/#?\",\n    endsWith = \"\",\n  } = options;\n  const endsWithRe = `[${escapeString(endsWith)}]|$`;\n  const delimiterRe = `[${escapeString(delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            route += `((?:${token.pattern})${token.modifier})`;\n          } else {\n            route += `(${token.pattern})${token.modifier}`;\n          }\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiterRe}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWithRe})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n        : endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiterRe}(?=${endsWithRe}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiterRe}|${endsWithRe})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n","/** Turn a string into a slug by lowercasing and replacing whitespace. */\nexport const classify = (text: string, fallback?: string): string => {\n\tconst output = String(text)\n\t\t.toLowerCase()\n\t\t// .normalize('NFD') // split an accented letter in the base letter and the acent\n\t\t// .replace(/[\\u0300-\\u036f]/g, '') // remove all previously split accents\n\t\t.replace(/[\\s/_.]+/g, '-') // replace spaces and _./ with '-'\n\t\t.replace(/[^\\w-]+/g, '') // remove all non-word chars\n\t\t.replace(/--+/g, '-') // replace repeating '-' with single '-'\n\t\t.replace(/^-+|-+$/g, ''); // trim '-' from edges\n\treturn output || fallback || '';\n};\n","/** Get the current page URL: path name + query params. Optionally including hash. */\nexport const getCurrentUrl = ({ hash }: { hash?: boolean } = {}): string => {\n\treturn location.pathname + location.search + (hash ? location.hash : '');\n};\n","import { getCurrentUrl } from './getCurrentUrl.js';\n\nexport interface HistoryState {\n\turl: string;\n\tsource: 'swup';\n\trandom: number;\n\tindex?: number;\n\t[key: string]: unknown;\n}\n\n/** Create a new history record with a custom swup identifier. */\nexport const createHistoryRecord = (\n\turl: string,\n\tcustomData: Record<string, unknown> = {}\n): void => {\n\turl = url || getCurrentUrl({ hash: true });\n\tconst data: HistoryState = {\n\t\turl,\n\t\trandom: Math.random(),\n\t\tsource: 'swup',\n\t\t...customData\n\t};\n\thistory.pushState(data, '', url);\n};\n","import { HistoryState } from './createHistoryRecord.js';\nimport { getCurrentUrl } from './getCurrentUrl.js';\n\n/** Update the current history record with a custom swup identifier. */\nexport const updateHistoryRecord = (\n\turl: string | null = null,\n\tcustomData: Record<string, unknown> = {}\n): void => {\n\turl = url || getCurrentUrl({ hash: true });\n\tconst state = (history.state as HistoryState) || {};\n\tconst data: HistoryState = {\n\t\t...state,\n\t\turl,\n\t\trandom: Math.random(),\n\t\tsource: 'swup',\n\t\t...customData\n\t};\n\thistory.replaceState(data, '', url);\n};\n","import delegate, { DelegateEventHandler, DelegateOptions, EventType } from 'delegate-it';\nimport { ParseSelector } from 'typed-query-selector/parser.js';\n\nexport type DelegateEventUnsubscribe = {\n\tdestroy: () => void;\n};\n\n/** Register a delegated event listener. */\nexport const delegateEvent = <\n\tSelector extends string,\n\tTElement extends Element = ParseSelector<Selector, HTMLElement>,\n\tTEvent extends EventType = EventType\n>(\n\tselector: Selector,\n\ttype: TEvent,\n\tcallback: DelegateEventHandler<GlobalEventHandlersEventMap[TEvent], TElement>,\n\toptions?: DelegateOptions\n): DelegateEventUnsubscribe => {\n\tconst controller = new AbortController();\n\toptions = { ...options, signal: controller.signal };\n\tdelegate<Selector, TElement, TEvent>(selector, type, callback, options);\n\treturn { destroy: () => controller.abort() };\n};\n","/**\n * A helper for creating a Location from either an element\n * or a URL object/string\n *\n */\nexport class Location extends URL {\n\tconstructor(url: URL | string, base: string = document.baseURI) {\n\t\tsuper(url.toString(), base);\n\t}\n\n\t/**\n\t * The full local path including query params.\n\t */\n\tget url(): string {\n\t\treturn this.pathname + this.search;\n\t}\n\n\t/**\n\t * Instantiate a Location from an element's href attribute\n\t * @param el\n\t * @returns new Location instance\n\t */\n\tstatic fromElement(el: Element): Location {\n\t\tconst href = el.getAttribute('href') || el.getAttribute('xlink:href') || '';\n\t\treturn new Location(href);\n\t}\n\n\t/**\n\t * Instantiate a Location from a URL object or string\n\t * @param url\n\t * @returns new Location instance\n\t */\n\tstatic fromUrl(url: URL | string): Location {\n\t\treturn new Location(url);\n\t}\n}\n","import { match } from 'path-to-regexp';\n\nimport type {\n\tPath,\n\tParseOptions,\n\tTokensToRegexpOptions,\n\tRegexpToFunctionOptions,\n\tMatchFunction\n} from 'path-to-regexp';\n\nexport { Path };\n\n/** Create a match function from a path pattern that checks if a URLs matches it. */\nexport const matchPath = <P extends object = object>(\n\tpath: Path,\n\toptions?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions\n): MatchFunction<P> => {\n\ttry {\n\t\treturn match<P>(path, options);\n\t} catch (error) {\n\t\tthrow new Error(`[swup] Error parsing path \"${String(path)}\":\\n${String(error)}`);\n\t}\n};\n","import Swup from '../Swup.js';\nimport { Location } from '../helpers.js';\nimport { PageData } from './fetchPage.js';\n\nexport interface CacheData extends PageData {}\n\n/**\n * In-memory page cache.\n */\nexport class Cache {\n\t/** Swup instance this cache belongs to */\n\tprotected swup: Swup;\n\n\t/** Cached pages, indexed by URL */\n\tprotected pages: Map<string, CacheData> = new Map();\n\n\tconstructor(swup: Swup) {\n\t\tthis.swup = swup;\n\t}\n\n\t/** Number of cached pages in memory. */\n\tget size(): number {\n\t\treturn this.pages.size;\n\t}\n\n\t/** All cached pages. */\n\tget all() {\n\t\tconst copy = new Map();\n\t\tthis.pages.forEach((page, key) => {\n\t\t\tcopy.set(key, { ...page });\n\t\t});\n\t\treturn copy;\n\t}\n\n\t/** Check if the given URL has been cached. */\n\thas(url: string): boolean {\n\t\treturn this.pages.has(this.resolve(url));\n\t}\n\n\t/** Return a shallow copy of the cached page object if available. */\n\tget(url: string): CacheData | undefined {\n\t\tconst result = this.pages.get(this.resolve(url));\n\t\tif (!result) return result;\n\t\treturn { ...result };\n\t}\n\n\t/** Create a cache record for the specified URL. */\n\tset(url: string, page: CacheData) {\n\t\turl = this.resolve(url);\n\t\tpage = { ...page, url };\n\t\tthis.pages.set(url, page);\n\t\tthis.swup.hooks.callSync('cache:set', { page });\n\t}\n\n\t/** Update a cache record, overwriting or adding custom data. */\n\tupdate(url: string, payload: object) {\n\t\turl = this.resolve(url);\n\t\tconst page = { ...this.get(url), ...payload, url } as CacheData;\n\t\tthis.pages.set(url, page);\n\t}\n\n\t/** Delete a cache record. */\n\tdelete(url: string): void {\n\t\tthis.pages.delete(this.resolve(url));\n\t}\n\n\t/** Empty the cache. */\n\tclear(): void {\n\t\tthis.pages.clear();\n\t\tthis.swup.hooks.callSync('cache:clear', undefined);\n\t}\n\n\t/** Remove all cache entries that return true for a given predicate function.  */\n\tprune(predicate: (url: string, page: CacheData) => boolean): void {\n\t\tthis.pages.forEach((page, url) => {\n\t\t\tif (predicate(url, page)) {\n\t\t\t\tthis.delete(url);\n\t\t\t}\n\t\t});\n\t}\n\n\t/** Resolve URLs by making them local and letting swup resolve them. */\n\tprotected resolve(urlToResolve: string): string {\n\t\tconst { url } = Location.fromUrl(urlToResolve);\n\t\treturn this.swup.resolveUrl(url);\n\t}\n}\n","/** Find an element by selector. */\nexport const query = (selector: string, context: Document | Element = document) => {\n\treturn context.querySelector<HTMLElement>(selector);\n};\n\n/** Find a set of elements by selector. */\nexport const queryAll = (\n\tselector: string,\n\tcontext: Document | Element = document\n): HTMLElement[] => {\n\treturn Array.from(context.querySelectorAll(selector));\n};\n\n/** Return a Promise that resolves after the next event loop. */\nexport const nextTick = (): Promise<void> => {\n\treturn new Promise((resolve) => {\n\t\trequestAnimationFrame(() => {\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t});\n};\n\n/** Check if an object is a Promise or a Thenable */\nexport function isPromise<T>(obj: unknown): obj is PromiseLike<T> {\n\treturn (\n\t\t!!obj &&\n\t\t(typeof obj === 'object' || typeof obj === 'function') &&\n\t\ttypeof (obj as Record<string, unknown>).then === 'function'\n\t);\n}\n\n/** Call a function as a Promise. Resolves with the returned Promsise or immediately. */\n// eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any\nexport function runAsPromise(func: Function, args: unknown[] = []): Promise<unknown> {\n\treturn new Promise((resolve, reject) => {\n\t\tconst result: unknown = func(...args);\n\t\tif (isPromise(result)) {\n\t\t\tresult.then(resolve, reject);\n\t\t} else {\n\t\t\tresolve(result);\n\t\t}\n\t});\n}\n\n/**\n * Force a layout reflow, e.g. after adding classnames\n * @returns The offset height, just here so it doesn't get optimized away by the JS engine\n * @see https://stackoverflow.com/a/21665117/3759615\n */\nexport function forceReflow(element?: HTMLElement) {\n\telement = element || document.body;\n\treturn element?.offsetHeight;\n}\n\n/** Escape a string with special chars to not break CSS selectors. */\nexport const escapeCssIdentifier = (ident: string) => {\n\t// @ts-ignore this is for support check, so it's correct that TS complains\n\tif (window.CSS && window.CSS.escape) {\n\t\treturn CSS.escape(ident);\n\t}\n\treturn ident;\n};\n\n/** Fix for Chrome below v61 formatting CSS floats with comma in some locales. */\nexport const toMs = (s: string) => {\n\treturn Number(s.slice(0, -1).replace(',', '.')) * 1000;\n};\n","import Swup from '../Swup.js';\nimport { queryAll } from '../utils.js';\n\nexport class Classes {\n\tprotected swup: Swup;\n\tprotected swupClasses = ['to-', 'is-changing', 'is-rendering', 'is-popstate', 'is-animating'];\n\n\tconstructor(swup: Swup) {\n\t\tthis.swup = swup;\n\t}\n\n\tprotected get selectors(): string[] {\n\t\tconst { scope } = this.swup.visit.animation;\n\t\tif (scope === 'containers') return this.swup.visit.containers;\n\t\tif (scope === 'html') return ['html'];\n\t\tif (Array.isArray(scope)) return scope;\n\t\treturn [];\n\t}\n\n\tprotected get selector(): string {\n\t\treturn this.selectors.join(',');\n\t}\n\n\tprotected get targets(): HTMLElement[] {\n\t\tif (!this.selector.trim()) return [];\n\t\treturn queryAll(this.selector);\n\t}\n\n\tadd(...classes: string[]): void {\n\t\tthis.targets.forEach((target) => target.classList.add(...classes));\n\t}\n\n\tremove(...classes: string[]): void {\n\t\tthis.targets.forEach((target) => target.classList.remove(...classes));\n\t}\n\n\tclear(): void {\n\t\tthis.targets.forEach((target) => {\n\t\t\tconst remove = target.className.split(' ').filter((c) => this.isSwupClass(c));\n\t\t\ttarget.classList.remove(...remove);\n\t\t});\n\t}\n\n\tprotected isSwupClass(className: string): boolean {\n\t\treturn this.swupClasses.some((c) => className.startsWith(c));\n\t}\n}\n","import Swup, { Options } from '../Swup.js';\nimport { HistoryAction, HistoryDirection } from './navigate.js';\n\n/** An object holding details about the current visit. */\nexport interface Visit {\n\t/** A unique ID to identify this visit */\n\tid: number;\n\t/** The previous page, about to leave */\n\tfrom: VisitFrom;\n\t/** The next page, about to enter */\n\tto: VisitTo;\n\t/** The content containers, about to be replaced */\n\tcontainers: Options['containers'];\n\t/** Information about animated page transitions */\n\tanimation: VisitAnimation;\n\t/** What triggered this visit */\n\ttrigger: VisitTrigger;\n\t/** Cache behavior for this visit */\n\tcache: VisitCache;\n\t/** Browser history behavior on this visit */\n\thistory: VisitHistory;\n\t/** Scroll behavior on this visit */\n\tscroll: VisitScroll;\n}\n\nexport interface VisitFrom {\n\t/** The URL of the previous page */\n\turl: string;\n}\n\nexport interface VisitTo {\n\t/** The URL of the next page */\n\turl: string;\n\t/** The hash of the next page */\n\thash?: string;\n\t/** The HTML content of the next page */\n\thtml?: string;\n}\n\nexport interface VisitAnimation {\n\t/** Whether this visit is animated. Default: `true` */\n\tanimate: boolean;\n\t/** Whether to wait for the next page to load before starting the animation. Default: `false` */\n\twait: boolean;\n\t/** Name of a custom animation to run. */\n\tname?: string;\n\t/** Elements on which to add animation classes. Default: `html` element */\n\tscope: 'html' | 'containers' | string[];\n\t/** Selector for detecting animation timing. Default: `[class*=\"transition-\"]` */\n\tselector: Options['animationSelector'];\n}\n\nexport interface VisitScroll {\n\t/** Whether to reset the scroll position after the visit. Default: `true` */\n\treset: boolean;\n\t/** Anchor element to scroll to on the next page. */\n\ttarget?: string | false;\n}\n\nexport interface VisitTrigger {\n\t/** DOM element that triggered this visit. */\n\tel?: Element;\n\t/** DOM event that triggered this visit. */\n\tevent?: Event;\n}\n\nexport interface VisitCache {\n\t/** Whether this visit will try to load the requested page from cache. */\n\tread: boolean;\n\t/** Whether this visit will save the loaded page in cache. */\n\twrite: boolean;\n}\n\nexport interface VisitHistory {\n\t/** History action to perform: `push` for creating a new history entry, `replace` for replacing the current entry. Default: `push` */\n\taction: HistoryAction;\n\t/** Whether this visit was triggered by a browser history navigation. */\n\tpopstate: boolean;\n\t/** The direction of travel in case of a browser history navigation: backward or forward. */\n\tdirection: HistoryDirection | undefined;\n}\n\nexport interface VisitInitOptions {\n\tto: string;\n\tfrom?: string;\n\thash?: string;\n\tel?: Element;\n\tevent?: Event;\n}\n\n/** Create a new visit object. */\nexport function createVisit(\n\tthis: Swup,\n\t{ to, from = this.currentPageUrl, hash, el, event }: VisitInitOptions\n): Visit {\n\treturn {\n\t\tid: Math.random(),\n\t\tfrom: { url: from },\n\t\tto: { url: to, hash },\n\t\tcontainers: this.options.containers,\n\t\tanimation: {\n\t\t\tanimate: true,\n\t\t\twait: false,\n\t\t\tname: undefined,\n\t\t\tscope: this.options.animationScope,\n\t\t\tselector: this.options.animationSelector\n\t\t},\n\t\ttrigger: {\n\t\t\tel,\n\t\t\tevent\n\t\t},\n\t\tcache: {\n\t\t\tread: this.options.cache,\n\t\t\twrite: this.options.cache\n\t\t},\n\t\thistory: {\n\t\t\taction: 'push',\n\t\t\tpopstate: false,\n\t\t\tdirection: undefined\n\t\t},\n\t\tscroll: {\n\t\t\treset: true,\n\t\t\ttarget: undefined\n\t\t}\n\t};\n}\n","import { DelegateEvent } from 'delegate-it';\n\nimport Swup from '../Swup.js';\nimport { isPromise, runAsPromise } from '../utils.js';\nimport { Visit } from './Visit.js';\nimport { FetchOptions, PageData } from './fetchPage.js';\n\nexport interface HookDefinitions {\n\t'animation:out:start': undefined;\n\t'animation:out:await': { skip: boolean };\n\t'animation:out:end': undefined;\n\t'animation:in:start': undefined;\n\t'animation:in:await': { skip: boolean };\n\t'animation:in:end': undefined;\n\t'animation:skip': undefined;\n\t'cache:clear': undefined;\n\t'cache:set': { page: PageData };\n\t'content:replace': { page: PageData };\n\t'content:scroll': undefined;\n\t'enable': undefined;\n\t'disable': undefined;\n\t'fetch:request': { url: string; options: FetchOptions };\n\t'fetch:error': { url: string; status: number; response: Response };\n\t'history:popstate': { event: PopStateEvent };\n\t'link:click': { el: HTMLAnchorElement; event: DelegateEvent<MouseEvent> };\n\t'link:self': undefined;\n\t'link:anchor': { hash: string };\n\t'link:newtab': { href: string };\n\t'page:load': { page?: PageData; cache?: boolean; options: FetchOptions };\n\t'page:view': { url: string; title: string };\n\t'scroll:top': { options: ScrollIntoViewOptions };\n\t'scroll:anchor': { hash: string; options: ScrollIntoViewOptions };\n\t'visit:start': undefined;\n\t'visit:end': undefined;\n}\n\nexport interface HookReturnValues {\n\t'content:scroll': Promise<boolean>;\n\t'fetch:request': Promise<Response>;\n\t'page:load': Promise<PageData>;\n\t'scroll:top': boolean;\n\t'scroll:anchor': boolean;\n}\n\nexport type HookArguments<T extends HookName> = HookDefinitions[T];\n\nexport type HookName = keyof HookDefinitions;\n\n/** A generic hook handler. */\nexport type Handler<T extends HookName> = (\n\t/** Context about the current visit. */\n\tvisit: Visit,\n\t/** Local arguments passed into the handler. */\n\targs: HookArguments<T>\n) => Promise<unknown> | unknown;\n\n/** A default hook handler with an expected return type. */\nexport type DefaultHandler<T extends HookName> = (\n\t/** Context about the current visit. */\n\tvisit: Visit,\n\t/** Local arguments passed into the handler. */\n\targs: HookArguments<T>,\n\t/** Default handler to be executed. Available if replacing an internal hook handler. */\n\tdefaultHandler?: DefaultHandler<T>\n) => T extends keyof HookReturnValues ? HookReturnValues[T] : Promise<unknown> | unknown;\n\nexport type Handlers = {\n\t[K in HookName]: Handler<K>[];\n};\n\n/** Unregister a previously registered hook handler. */\nexport type HookUnregister = () => void;\n\n/** Define when and how a hook handler is executed. */\nexport type HookOptions = {\n\t/** Execute the hook once, then remove the handler */\n\tonce?: boolean;\n\t/** Execute the hook before the internal default handler */\n\tbefore?: boolean;\n\t/** Set a priority for when to execute this hook. Lower numbers execute first. Default: `0` */\n\tpriority?: number;\n\t/** Replace the internal default handler with this hook handler */\n\treplace?: boolean;\n};\n\nexport type HookRegistration<\n\tT extends HookName,\n\tH extends Handler<T> | DefaultHandler<T> = Handler<T>\n> = {\n\tid: number;\n\thook: T;\n\thandler: H;\n\tdefaultHandler?: DefaultHandler<T>;\n} & HookOptions;\n\ntype HookLedger<T extends HookName> = Map<Handler<T>, HookRegistration<T>>;\n\ninterface HookRegistry extends Map<HookName, HookLedger<HookName>> {\n\tget<K extends HookName>(key: K): HookLedger<K> | undefined;\n\tset<K extends HookName>(key: K, value: HookLedger<K>): this;\n}\n\n/**\n * Hook registry.\n *\n * Create, trigger and handle hooks.\n *\n */\nexport class Hooks {\n\t/** Swup instance this registry belongs to */\n\tprotected swup: Swup;\n\n\t/** Map of all registered hook handlers. */\n\tprotected registry: HookRegistry = new Map();\n\n\t// Can we deduplicate this somehow? Or make it error when not in sync with HookDefinitions?\n\t// https://stackoverflow.com/questions/53387838/how-to-ensure-an-arrays-values-the-keys-of-a-typescript-interface/53395649\n\tprotected readonly hooks: HookName[] = [\n\t\t'animation:out:start',\n\t\t'animation:out:await',\n\t\t'animation:out:end',\n\t\t'animation:in:start',\n\t\t'animation:in:await',\n\t\t'animation:in:end',\n\t\t'animation:skip',\n\t\t'cache:clear',\n\t\t'cache:set',\n\t\t'content:replace',\n\t\t'content:scroll',\n\t\t'enable',\n\t\t'disable',\n\t\t'fetch:request',\n\t\t'fetch:error',\n\t\t'history:popstate',\n\t\t'link:click',\n\t\t'link:self',\n\t\t'link:anchor',\n\t\t'link:newtab',\n\t\t'page:load',\n\t\t'page:view',\n\t\t'scroll:top',\n\t\t'scroll:anchor',\n\t\t'visit:start',\n\t\t'visit:end'\n\t];\n\n\tconstructor(swup: Swup) {\n\t\tthis.swup = swup;\n\t\tthis.init();\n\t}\n\n\t/**\n\t * Create ledgers for all core hooks.\n\t */\n\tprotected init() {\n\t\tthis.hooks.forEach((hook) => this.create(hook));\n\t}\n\n\t/**\n\t * Create a new hook type.\n\t */\n\tcreate(hook: string) {\n\t\tif (!this.registry.has(hook as HookName)) {\n\t\t\tthis.registry.set(hook as HookName, new Map());\n\t\t}\n\t}\n\n\t/**\n\t * Check if a hook type exists.\n\t */\n\texists(hook: HookName): boolean {\n\t\treturn this.registry.has(hook);\n\t}\n\n\t/**\n\t * Get the ledger with all registrations for a hook.\n\t */\n\tprotected get<T extends HookName>(hook: T): HookLedger<T> | undefined {\n\t\tconst ledger = this.registry.get(hook);\n\t\tif (ledger) {\n\t\t\treturn ledger;\n\t\t}\n\t\tconsole.error(`Unknown hook '${hook}'`);\n\t}\n\n\t/**\n\t * Remove all handlers of all hooks.\n\t */\n\tclear() {\n\t\tthis.registry.forEach((ledger) => ledger.clear());\n\t}\n\n\t/**\n\t * Register a new hook handler.\n\t * @param hook Name of the hook to listen for\n\t * @param handler The handler function to execute\n\t * @param options Object to specify how and when the handler is executed\n\t *                Available options:\n\t *                - `once`: Only execute the handler once\n\t *                - `before`: Execute the handler before the default handler\n\t *                - `priority`: Specify the order in which the handlers are executed\n\t *                - `replace`: Replace the default handler with this handler\n\t * @returns A function to unregister the handler\n\t */\n\n\t// Overload: replacing default handler\n\ton<T extends HookName, O extends HookOptions>(hook: T, handler: DefaultHandler<T>, options: O & { replace: true }): HookUnregister; // prettier-ignore\n\t// Overload: passed in handler options\n\ton<T extends HookName, O extends HookOptions>(hook: T, handler: Handler<T>, options: O): HookUnregister; // prettier-ignore\n\t// Overload: no handler options\n\ton<T extends HookName>(hook: T, handler: Handler<T>): HookUnregister; // prettier-ignore\n\t// Implementation\n\ton<T extends HookName, O extends HookOptions>(\n\t\thook: T,\n\t\thandler: O['replace'] extends true ? DefaultHandler<T> : Handler<T>,\n\t\toptions: Partial<O> = {}\n\t): HookUnregister {\n\t\tconst ledger = this.get(hook);\n\t\tif (!ledger) {\n\t\t\tconsole.warn(`Hook '${hook}' not found.`);\n\t\t\treturn () => {};\n\t\t}\n\n\t\tconst id = ledger.size + 1;\n\t\tconst registration: HookRegistration<T> = { ...options, id, hook, handler };\n\t\tledger.set(handler, registration);\n\n\t\treturn () => this.off(hook, handler);\n\t}\n\n\t/**\n\t * Register a new hook handler to run before the default handler.\n\t * Shortcut for `hooks.on(hook, handler, { before: true })`.\n\t * @param hook Name of the hook to listen for\n\t * @param handler The handler function to execute\n\t * @param options Any other event options (see `hooks.on()` for details)\n\t * @returns A function to unregister the handler\n\t * @see on\n\t */\n\t// Overload: passed in handler options\n\tbefore<T extends HookName>(hook: T, handler: Handler<T>, options: HookOptions): HookUnregister;\n\t// Overload: no handler options\n\tbefore<T extends HookName>(hook: T, handler: Handler<T>): HookUnregister;\n\t// Implementation\n\tbefore<T extends HookName>(\n\t\thook: T,\n\t\thandler: Handler<T>,\n\t\toptions: HookOptions = {}\n\t): HookUnregister {\n\t\treturn this.on(hook, handler, { ...options, before: true });\n\t}\n\n\t/**\n\t * Register a new hook handler to replace the default handler.\n\t * Shortcut for `hooks.on(hook, handler, { replace: true })`.\n\t * @param hook Name of the hook to listen for\n\t * @param handler The handler function to execute instead of the default handler\n\t * @param options Any other event options (see `hooks.on()` for details)\n\t * @returns A function to unregister the handler\n\t * @see on\n\t */\n\t// Overload: passed in handler options\n\treplace<T extends HookName>(hook: T, handler: DefaultHandler<T>, options: HookOptions): HookUnregister; // prettier-ignore\n\t// Overload: no handler options\n\treplace<T extends HookName>(hook: T, handler: DefaultHandler<T>): HookUnregister; // prettier-ignore\n\t// Implementation\n\treplace<T extends HookName>(\n\t\thook: T,\n\t\thandler: DefaultHandler<T>,\n\t\toptions: HookOptions = {}\n\t): HookUnregister {\n\t\treturn this.on(hook, handler, { ...options, replace: true });\n\t}\n\n\t/**\n\t * Register a new hook handler to run once.\n\t * Shortcut for `hooks.on(hook, handler, { once: true })`.\n\t * @param hook Name of the hook to listen for\n\t * @param handler The handler function to execute\n\t * @param options Any other event options (see `hooks.on()` for details)\n\t * @see on\n\t */\n\t// Overload: passed in handler options\n\tonce<T extends HookName>(hook: T, handler: Handler<T>, options: HookOptions): HookUnregister;\n\t// Overload: no handler options\n\tonce<T extends HookName>(hook: T, handler: Handler<T>): HookUnregister;\n\t// Implementation\n\tonce<T extends HookName>(\n\t\thook: T,\n\t\thandler: Handler<T>,\n\t\toptions: HookOptions = {}\n\t): HookUnregister {\n\t\treturn this.on(hook, handler, { ...options, once: true });\n\t}\n\n\t/**\n\t * Unregister a hook handler.\n\t * @param hook Name of the hook the handler is registered for\n\t * @param handler The handler function that was registered.\n\t *                If omitted, all handlers for the hook will be removed.\n\t */\n\t// Overload: unregister a specific handler\n\toff<T extends HookName>(hook: T, handler: Handler<T> | DefaultHandler<T>): void;\n\t// Overload: unregister all handlers\n\toff<T extends HookName>(hook: T): void;\n\t// Implementation\n\toff<T extends HookName>(hook: T, handler?: Handler<T> | DefaultHandler<T>): void {\n\t\tconst ledger = this.get(hook);\n\t\tif (ledger && handler) {\n\t\t\tconst deleted = ledger.delete(handler);\n\t\t\tif (!deleted) {\n\t\t\t\tconsole.warn(`Handler for hook '${hook}' not found.`);\n\t\t\t}\n\t\t} else if (ledger) {\n\t\t\tledger.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Trigger a hook asynchronously, executing its default handler and all registered handlers.\n\t * Will execute all handlers in order and `await` any `Promise`s they return.\n\t * @param hook Name of the hook to trigger\n\t * @param args Arguments to pass to the handler\n\t * @param defaultHandler A default implementation of this hook to execute\n\t * @returns The resolved return value of the executed default handler\n\t */\n\tasync call<T extends HookName>(\n\t\thook: T,\n\t\targs: HookArguments<T>,\n\t\tdefaultHandler?: DefaultHandler<T>\n\t): Promise<Awaited<ReturnType<DefaultHandler<T>>>> {\n\t\tconst { before, handler, after } = this.getHandlers(hook, defaultHandler);\n\t\tawait this.run(before, args);\n\t\tconst [result] = await this.run(handler, args);\n\t\tawait this.run(after, args);\n\t\tthis.dispatchDomEvent(hook, args);\n\t\treturn result;\n\t}\n\n\t/**\n\t * Trigger a hook synchronously, executing its default handler and all registered handlers.\n\t * Will execute all handlers in order, but will **not** `await` any `Promise`s they return.\n\t * @param hook Name of the hook to trigger\n\t * @param args Arguments to pass to the handler\n\t * @param defaultHandler A default implementation of this hook to execute\n\t * @returns The (possibly unresolved) return value of the executed default handler\n\t */\n\tcallSync<T extends HookName>(\n\t\thook: T,\n\t\targs: HookArguments<T>,\n\t\tdefaultHandler?: DefaultHandler<T>\n\t): ReturnType<DefaultHandler<T>> {\n\t\tconst { before, handler, after } = this.getHandlers(hook, defaultHandler);\n\t\tthis.runSync(before, args);\n\t\tconst [result] = this.runSync(handler, args);\n\t\tthis.runSync(after, args);\n\t\tthis.dispatchDomEvent(hook, args);\n\t\treturn result;\n\t}\n\n\t/**\n\t * Execute the handlers for a hook, in order, as `Promise`s that will be `await`ed.\n\t * @param registrations The registrations (handler + options) to execute\n\t * @param args Arguments to pass to the handler\n\t */\n\n\t// Overload: running DefaultHandler: expect DefaultHandler return type\n\tprotected async run<T extends HookName>(registrations: HookRegistration<T, DefaultHandler<T>>[], args: HookArguments<T>): Promise<Awaited<ReturnType<DefaultHandler<T>>>[]>; // prettier-ignore\n\t// Overload:  running user handler: expect no specific type\n\tprotected async run<T extends HookName>(registrations: HookRegistration<T>[], args: HookArguments<T>): Promise<unknown[]>; // prettier-ignore\n\t// Implementation\n\tprotected async run<T extends HookName, R extends HookRegistration<T>[]>(\n\t\tregistrations: R,\n\t\targs: HookArguments<T>\n\t): Promise<Awaited<ReturnType<DefaultHandler<T>>> | unknown[]> {\n\t\tconst results = [];\n\t\tfor (const { hook, handler, defaultHandler, once } of registrations) {\n\t\t\tconst result = await runAsPromise(handler, [this.swup.visit, args, defaultHandler]);\n\t\t\tresults.push(result);\n\t\t\tif (once) {\n\t\t\t\tthis.off(hook, handler);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n\n\t/**\n\t * Execute the handlers for a hook, in order, without `await`ing any returned `Promise`s.\n\t * @param registrations The registrations (handler + options) to execute\n\t * @param args Arguments to pass to the handler\n\t */\n\n\t// Overload: running DefaultHandler: expect DefaultHandler return type\n\tprotected runSync<T extends HookName>(registrations: HookRegistration<T, DefaultHandler<T>>[], args: HookArguments<T> ): ReturnType<DefaultHandler<T>>[]; // prettier-ignore\n\t// Overload: running user handler: expect no specific type\n\tprotected runSync<T extends HookName>(registrations: HookRegistration<T>[], args: HookArguments<T>): unknown[]; // prettier-ignore\n\t// Implementation\n\tprotected runSync<T extends HookName, R extends HookRegistration<T>[]>(\n\t\tregistrations: R,\n\t\targs: HookArguments<T>\n\t): (ReturnType<DefaultHandler<T>> | unknown)[] {\n\t\tconst results = [];\n\t\tfor (const { hook, handler, defaultHandler, once } of registrations) {\n\t\t\tconst result = (handler as DefaultHandler<T>)(this.swup.visit, args, defaultHandler);\n\t\t\tresults.push(result);\n\t\t\tif (isPromise(result)) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`Promise returned from handler for synchronous hook '${hook}'.` +\n\t\t\t\t\t\t`Swup will not wait for it to resolve.`\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (once) {\n\t\t\t\tthis.off(hook, handler);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n\n\t/**\n\t * Get all registered handlers for a hook, sorted by priority and registration order.\n\t * @param hook Name of the hook\n\t * @param defaultHandler The optional default handler of this hook\n\t * @returns An object with the handlers sorted into `before` and `after` arrays,\n\t *          as well as a flag indicating if the original handler was replaced\n\t */\n\tprotected getHandlers<T extends HookName>(hook: T, defaultHandler?: DefaultHandler<T>) {\n\t\tconst ledger = this.get(hook);\n\t\tif (!ledger) {\n\t\t\treturn { found: false, before: [], handler: [], after: [], replaced: false };\n\t\t}\n\n\t\tconst registrations = Array.from(ledger.values());\n\n\t\t// Let TypeScript know that replaced handlers are default handlers by filtering to true\n\t\tconst def = (T: HookRegistration<T>): T is HookRegistration<T, DefaultHandler<T>> => true;\n\t\tconst sort = this.sortRegistrations;\n\n\t\t// Filter into before, after, and replace handlers\n\t\tconst before = registrations.filter(({ before, replace }) => before && !replace).sort(sort);\n\t\tconst replace = registrations.filter(({ replace }) => replace).filter(def).sort(sort); // prettier-ignore\n\t\tconst after = registrations.filter(({ before, replace }) => !before && !replace).sort(sort);\n\t\tconst replaced = replace.length > 0;\n\n\t\t// Define main handler registration\n\t\t// Created as HookRegistration[] array to allow passing it into hooks.run() directly\n\t\tlet handler: HookRegistration<T, DefaultHandler<T>>[] = [];\n\t\tif (defaultHandler) {\n\t\t\thandler = [{ id: 0, hook, handler: defaultHandler }];\n\t\t\tif (replaced) {\n\t\t\t\tconst index = replace.length - 1;\n\t\t\t\tconst replacingHandler = replace[index].handler;\n\t\t\t\tconst createDefaultHandler = (index: number): DefaultHandler<T> | undefined => {\n\t\t\t\t\tconst next = replace[index - 1];\n\t\t\t\t\tif (next) {\n\t\t\t\t\t\treturn (visit, args) =>\n\t\t\t\t\t\t\tnext.handler(visit, args, createDefaultHandler(index - 1));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn defaultHandler;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tconst nestedDefaultHandler = createDefaultHandler(index);\n\t\t\t\thandler = [\n\t\t\t\t\t{ id: 0, hook, handler: replacingHandler, defaultHandler: nestedDefaultHandler }\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\n\t\treturn { found: true, before, handler, after, replaced };\n\t}\n\n\t/**\n\t * Sort two hook registrations by priority and registration order.\n\t * @param a The registration object to compare\n\t * @param b The other registration object to compare with\n\t * @returns The sort direction\n\t */\n\tprotected sortRegistrations<T extends HookName>(\n\t\ta: HookRegistration<T>,\n\t\tb: HookRegistration<T>\n\t): number {\n\t\tconst priority = (a.priority ?? 0) - (b.priority ?? 0);\n\t\tconst id = a.id - b.id;\n\t\treturn priority || id || 0;\n\t}\n\n\t/**\n\t * Dispatch a custom event on the `document` for a hook. Prefixed with `swup:`\n\t * @param hook Name of the hook.\n\t */\n\tprotected dispatchDomEvent<T extends HookName>(hook: T, args?: HookArguments<T>): void {\n\t\tconst detail = { hook, args, visit: this.swup.visit };\n\t\tdocument.dispatchEvent(new CustomEvent(`swup:${hook}`, { detail }));\n\t}\n}\n","import { escapeCssIdentifier as escape, query } from '../utils.js';\n\n/**\n * Find the anchor element for a given hash.\n *\n * @param hash Hash with or without leading '#'\n * @returns The element, if found, or null.\n *\n * @see https://html.spec.whatwg.org/#find-a-potential-indicated-element\n */\nexport const getAnchorElement = (hash?: string): Element | null => {\n\tif (hash && hash.charAt(0) === '#') {\n\t\thash = hash.substring(1);\n\t}\n\n\tif (!hash) {\n\t\treturn null;\n\t}\n\n\tconst decoded = decodeURIComponent(hash);\n\tlet element =\n\t\tdocument.getElementById(hash) ||\n\t\tdocument.getElementById(decoded) ||\n\t\tquery(`a[name='${escape(hash)}']`) ||\n\t\tquery(`a[name='${escape(decoded)}']`);\n\n\tif (!element && hash === 'top') {\n\t\telement = document.body;\n\t}\n\n\treturn element;\n};\n","import { queryAll, toMs } from '../utils.js';\nimport Swup, { Options } from '../Swup.js';\n\nconst TRANSITION = 'transition';\nconst ANIMATION = 'animation';\n\ntype AnimationTypes = typeof TRANSITION | typeof ANIMATION;\ntype AnimationProperties = 'Delay' | 'Duration';\ntype AnimationStyleKeys = `${AnimationTypes}${AnimationProperties}` | 'transitionProperty';\ntype AnimationStyleDeclarations = Pick<CSSStyleDeclaration, AnimationStyleKeys>;\n\nexport type AnimationDirection = 'in' | 'out';\n\n/**\n * Return a Promise that resolves when all CSS animations and transitions\n * are done on the page. Filters by selector or takes elements directly.\n */\nexport async function awaitAnimations(\n\tthis: Swup,\n\t{\n\t\telements,\n\t\tselector\n\t}: {\n\t\tselector: Options['animationSelector'];\n\t\telements?: NodeListOf<HTMLElement> | HTMLElement[];\n\t}\n): Promise<void> {\n\t// Allow usage of swup without animations: { animationSelector: false }\n\tif (selector === false && !elements) {\n\t\treturn;\n\t}\n\n\t// Allow passing in elements\n\tlet animatedElements: HTMLElement[] = [];\n\tif (elements) {\n\t\tanimatedElements = Array.from(elements);\n\t} else if (selector) {\n\t\tanimatedElements = queryAll(selector, document.body);\n\t\t// Warn if no elements match the selector, but keep things going\n\t\tif (!animatedElements.length) {\n\t\t\tconsole.warn(`[swup] No elements found matching animationSelector \\`${selector}\\``);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tconst awaitedAnimations = animatedElements.map((el) => awaitAnimationsOnElement(el));\n\tconst hasAnimations = awaitedAnimations.filter(Boolean).length > 0;\n\tif (!hasAnimations) {\n\t\tif (selector) {\n\t\t\tconsole.warn(\n\t\t\t\t`[swup] No CSS animation duration defined on elements matching \\`${selector}\\``\n\t\t\t);\n\t\t}\n\t\treturn;\n\t}\n\n\tawait Promise.all(awaitedAnimations);\n}\n\nfunction awaitAnimationsOnElement(element: Element): Promise<void> | false {\n\tconst { type, timeout, propCount } = getTransitionInfo(element);\n\n\t// Resolve immediately if no transition defined\n\tif (!type || !timeout) {\n\t\treturn false;\n\t}\n\n\treturn new Promise((resolve) => {\n\t\tconst endEvent = `${type}end`;\n\t\tconst startTime = performance.now();\n\t\tlet propsTransitioned = 0;\n\n\t\tconst end = () => {\n\t\t\telement.removeEventListener(endEvent, onEnd);\n\t\t\tresolve();\n\t\t};\n\n\t\tconst onEnd: EventListener = (event) => {\n\t\t\t// Skip transitions on child elements\n\t\t\tif (event.target !== element) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isTransitionOrAnimationEvent(event)) {\n\t\t\t\tthrow new Error('Not a transition or animation event.');\n\t\t\t}\n\n\t\t\t// Skip transitions that happened before we started listening\n\t\t\tconst elapsedTime = (performance.now() - startTime) / 1000;\n\t\t\tif (elapsedTime < event.elapsedTime) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// End if all properties have transitioned\n\t\t\tif (++propsTransitioned >= propCount) {\n\t\t\t\tend();\n\t\t\t}\n\t\t};\n\n\t\tsetTimeout(() => {\n\t\t\tif (propsTransitioned < propCount) {\n\t\t\t\tend();\n\t\t\t}\n\t\t}, timeout + 1);\n\n\t\telement.addEventListener(endEvent, onEnd);\n\t});\n}\n\nexport function getTransitionInfo(element: Element, expectedType?: AnimationTypes) {\n\tconst styles = window.getComputedStyle(element) as AnimationStyleDeclarations;\n\n\tconst transitionDelays = getStyleProperties(styles, `${TRANSITION}Delay`);\n\tconst transitionDurations = getStyleProperties(styles, `${TRANSITION}Duration`);\n\tconst transitionTimeout = calculateTimeout(transitionDelays, transitionDurations);\n\tconst animationDelays = getStyleProperties(styles, `${ANIMATION}Delay`);\n\tconst animationDurations = getStyleProperties(styles, `${ANIMATION}Duration`);\n\tconst animationTimeout = calculateTimeout(animationDelays, animationDurations);\n\n\tlet type: AnimationTypes | null = null;\n\tlet timeout = 0;\n\tlet propCount = 0;\n\n\tif (expectedType === TRANSITION) {\n\t\tif (transitionTimeout > 0) {\n\t\t\ttype = TRANSITION;\n\t\t\ttimeout = transitionTimeout;\n\t\t\tpropCount = transitionDurations.length;\n\t\t}\n\t} else if (expectedType === ANIMATION) {\n\t\tif (animationTimeout > 0) {\n\t\t\ttype = ANIMATION;\n\t\t\ttimeout = animationTimeout;\n\t\t\tpropCount = animationDurations.length;\n\t\t}\n\t} else {\n\t\ttimeout = Math.max(transitionTimeout, animationTimeout);\n\t\ttype = timeout > 0 ? (transitionTimeout > animationTimeout ? TRANSITION : ANIMATION) : null;\n\t\tpropCount = type\n\t\t\t? type === TRANSITION\n\t\t\t\t? transitionDurations.length\n\t\t\t\t: animationDurations.length\n\t\t\t: 0;\n\t}\n\n\treturn {\n\t\ttype,\n\t\ttimeout,\n\t\tpropCount\n\t};\n}\n\nfunction isTransitionOrAnimationEvent(event: Event): event is TransitionEvent | AnimationEvent {\n\treturn [`${TRANSITION}end`, `${ANIMATION}end`].includes(event.type);\n}\n\nfunction getStyleProperties(styles: AnimationStyleDeclarations, key: AnimationStyleKeys): string[] {\n\treturn (styles[key] || '').split(', ');\n}\n\nfunction calculateTimeout(delays: string[], durations: string[]): number {\n\twhile (delays.length < durations.length) {\n\t\tdelays = delays.concat(delays);\n\t}\n\n\treturn Math.max(...durations.map((duration, i) => toMs(duration) + toMs(delays[i])));\n}\n","import Swup from '../Swup.js';\nimport { createHistoryRecord, updateHistoryRecord, getCurrentUrl, Location } from '../helpers.js';\nimport { FetchOptions, PageData } from './fetchPage.js';\nimport { VisitInitOptions } from './Visit.js';\n\nexport type HistoryAction = 'push' | 'replace';\nexport type HistoryDirection = 'forwards' | 'backwards';\nexport type NavigationToSelfAction = 'scroll' | 'navigate';\nexport type CacheControl = Partial<{ read: boolean; write: boolean }>;\n\n/** Define how to navigate to a page. */\ntype NavigationOptions = {\n\t/** Whether this visit is animated. Default: `true` */\n\tanimate?: boolean;\n\t/** Name of a custom animation to run. */\n\tanimation?: string;\n\t/** History action to perform: `push` for creating a new history entry, `replace` for replacing the current entry. Default: `push` */\n\thistory?: HistoryAction;\n\t/** Whether this visit should read from or write to the cache. */\n\tcache?: CacheControl;\n};\n\n/**\n * Navigate to a new URL.\n * @param url The URL to navigate to.\n * @param options Options for how to perform this visit.\n * @returns Promise<void>\n */\nexport function navigate(\n\tthis: Swup,\n\turl: string,\n\toptions: NavigationOptions & FetchOptions = {},\n\tinit: Omit<VisitInitOptions, 'to'> = {}\n) {\n\tif (typeof url !== 'string') {\n\t\tthrow new Error(`swup.navigate() requires a URL parameter`);\n\t}\n\n\t// Check if the visit should be ignored\n\tif (this.shouldIgnoreVisit(url, { el: init.el, event: init.event })) {\n\t\twindow.location.href = url;\n\t\treturn;\n\t}\n\n\tconst { url: to, hash } = Location.fromUrl(url);\n\tthis.visit = this.createVisit({ ...init, to, hash });\n\tthis.performNavigation(options);\n}\n\n/**\n * Start a visit to a new URL.\n *\n * Internal method that assumes the visit context has already been created.\n *\n * As a user, you should call `swup.navigate(url)` instead.\n *\n * @param url The URL to navigate to.\n * @param options Options for how to perform this visit.\n * @returns Promise<void>\n */\nexport async function performNavigation(\n\tthis: Swup,\n\toptions: NavigationOptions & FetchOptions = {}\n): Promise<void> {\n\t// Save this localy to a) allow ignoring the visit if a new one was started in the meantime\n\t// and b) avoid unintended modifications to any newer visits\n\tconst visit = this.visit;\n\n\tconst { el } = visit.trigger;\n\toptions.referrer = options.referrer || this.currentPageUrl;\n\n\tif (options.animate === false) {\n\t\tvisit.animation.animate = false;\n\t}\n\n\t// Clean up old animation classes\n\tif (!visit.animation.animate) {\n\t\tthis.classes.clear();\n\t}\n\n\t// Get history action from option or attribute on trigger element\n\tconst history = options.history || el?.getAttribute('data-swup-history') || undefined;\n\tif (history && ['push', 'replace'].includes(history)) {\n\t\tvisit.history.action = history as HistoryAction;\n\t}\n\n\t// Get custom animation name from option or attribute on trigger element\n\tconst animation = options.animation || el?.getAttribute('data-swup-animation') || undefined;\n\tif (animation) {\n\t\tvisit.animation.name = animation;\n\t}\n\n\t// Sanitize cache option\n\tif (typeof options.cache === 'object') {\n\t\tvisit.cache.read = options.cache.read ?? visit.cache.read;\n\t\tvisit.cache.write = options.cache.write ?? visit.cache.write;\n\t} else if (options.cache !== undefined) {\n\t\tvisit.cache = { read: !!options.cache, write: !!options.cache };\n\t}\n\t// Delete this so that window.fetch doesn't mis-interpret it\n\tdelete options.cache;\n\n\ttry {\n\t\tawait this.hooks.call('visit:start', undefined);\n\n\t\t// Begin loading page\n\t\tconst pagePromise = this.hooks.call('page:load', { options }, async (visit, args) => {\n\t\t\t// Read from cache\n\t\t\tlet cachedPage: PageData | undefined;\n\t\t\tif (visit.cache.read) {\n\t\t\t\tcachedPage = this.cache.get(visit.to.url);\n\t\t\t}\n\n\t\t\targs.page = cachedPage || (await this.fetchPage(visit.to.url, args.options));\n\t\t\targs.cache = !!cachedPage;\n\n\t\t\treturn args.page;\n\t\t});\n\n\t\t// Create/update history record if this is not a popstate call or leads to the same URL\n\t\tif (!visit.history.popstate) {\n\t\t\t// Add the hash directly from the trigger element\n\t\t\tconst newUrl = visit.to.url + visit.to.hash;\n\t\t\tif (visit.history.action === 'replace' || visit.to.url === this.currentPageUrl) {\n\t\t\t\tupdateHistoryRecord(newUrl);\n\t\t\t} else {\n\t\t\t\tthis.currentHistoryIndex++;\n\t\t\t\tcreateHistoryRecord(newUrl, { index: this.currentHistoryIndex });\n\t\t\t}\n\t\t}\n\n\t\tthis.currentPageUrl = getCurrentUrl();\n\n\t\t// Wait for page before starting to animate out?\n\t\tif (visit.animation.wait) {\n\t\t\tconst { html } = await pagePromise;\n\t\t\tvisit.to.html = html;\n\t\t}\n\n\t\t// Wait for page to load and leave animation to finish\n\t\tconst animationPromise = this.animatePageOut();\n\t\tconst [page] = await Promise.all([pagePromise, animationPromise]);\n\n\t\t// Abort if another visit was started in the meantime\n\t\tif (visit.id !== this.visit.id) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Render page: replace content and scroll to top/fragment\n\t\tawait this.renderPage(page);\n\n\t\t// Wait for enter animation\n\t\tawait this.animatePageIn();\n\n\t\t// Finalize visit\n\t\tawait this.hooks.call('visit:end', undefined, () => this.classes.clear());\n\n\t\t// Reset visit info after finish?\n\t\t// if (visit.to && this.isSameResolvedUrl(visit.to.url, requestedUrl)) {\n\t\t// \tthis.visit = this.createVisit({ to: undefined });\n\t\t// }\n\t} catch (error: unknown) {\n\t\t// Return early if error is undefined (probably aborted preload request)\n\t\tif (!error) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Log to console as we swallow almost all hook errors\n\t\tconsole.error(error);\n\n\t\t// Rewrite `skipPopStateHandling` to redirect manually when `history.go` is processed\n\t\tthis.options.skipPopStateHandling = () => {\n\t\t\twindow.location.href = visit.to.url + visit.to.hash;\n\t\t\treturn true;\n\t\t};\n\n\t\t// Go back to the actual page we're still at\n\t\twindow.history.go(-1);\n\t}\n}\n","import Swup from '../Swup.js';\nimport { Location } from '../helpers.js';\n\n/** A page object as used by swup and its cache. */\nexport interface PageData {\n\t/** The URL of the page */\n\turl: string;\n\t/** The complete HTML response received from the server */\n\thtml: string;\n}\n\n/** Define how a page is fetched. */\nexport interface FetchOptions extends Omit<RequestInit, 'cache'> {\n\t/** The request method. */\n\tmethod?: 'GET' | 'POST';\n\t/** The body of the request: raw string, form data object or URL params. */\n\tbody?: string | FormData | URLSearchParams;\n}\n\nexport class FetchError extends Error {\n\turl: string;\n\tstatus: number;\n\tconstructor(message: string, details: { url: string; status: number }) {\n\t\tsuper(message);\n\t\tthis.name = 'FetchError';\n\t\tthis.url = details.url;\n\t\tthis.status = details.status;\n\t}\n}\n\n/**\n * Fetch a page from the server, return it and cache it.\n */\nexport async function fetchPage(\n\tthis: Swup,\n\turl: URL | string,\n\toptions: FetchOptions = {}\n): Promise<PageData> {\n\turl = Location.fromUrl(url).url;\n\n\tconst headers = { ...this.options.requestHeaders, ...options.headers };\n\toptions = { ...options, headers };\n\n\t// Allow hooking before this and returning a custom response-like object (e.g. custom fetch implementation)\n\tconst response: Response = await this.hooks.call(\n\t\t'fetch:request',\n\t\t{ url, options },\n\t\t(visit, { url, options }) => fetch(url, options)\n\t);\n\n\tconst { status, url: responseUrl } = response;\n\tconst html = await response.text();\n\n\tif (status === 500) {\n\t\tthis.hooks.call('fetch:error', { status, response, url: responseUrl });\n\t\tthrow new FetchError(`Server error: ${responseUrl}`, { status, url: responseUrl });\n\t}\n\n\tif (!html) {\n\t\tthrow new FetchError(`Empty response: ${responseUrl}`, { status, url: responseUrl });\n\t}\n\n\t// Resolve real url after potential redirect\n\tconst { url: finalUrl } = Location.fromUrl(responseUrl);\n\tconst page = { url: finalUrl, html };\n\n\t// Write to cache for safe methods and non-redirects\n\tif (\n\t\tthis.visit.cache.write &&\n\t\t(!options.method || options.method === 'GET') &&\n\t\turl === finalUrl\n\t) {\n\t\tthis.cache.set(page.url, page);\n\t}\n\n\treturn page;\n}\n","import Swup from '../Swup.js';\nimport { classify } from '../helpers.js';\n\n/**\n * Perform the out/leave animation of the current page.\n * @returns Promise<void>\n */\nexport const animatePageOut = async function (this: Swup) {\n\tif (!this.visit.animation.animate) {\n\t\tawait this.hooks.call('animation:skip', undefined);\n\t\treturn;\n\t}\n\n\tawait this.hooks.call('animation:out:start', undefined, (visit) => {\n\t\tthis.classes.add('is-changing', 'is-leaving', 'is-animating');\n\t\tif (visit.history.popstate) {\n\t\t\tthis.classes.add('is-popstate');\n\t\t}\n\t\tif (visit.animation.name) {\n\t\t\tthis.classes.add(`to-${classify(visit.animation.name)}`);\n\t\t}\n\t});\n\n\tawait this.hooks.call('animation:out:await', { skip: false }, async (visit, { skip }) => {\n\t\tif (skip) return;\n\t\tawait this.awaitAnimations({ selector: visit.animation.selector });\n\t});\n\n\tawait this.hooks.call('animation:out:end', undefined);\n};\n","import Swup, { Options } from '../Swup.js';\nimport { query, queryAll } from '../utils.js';\nimport { PageData } from './fetchPage.js';\n\n/**\n * Perform the replacement of content after loading a page.\n *\n * It takes an object with the page data as returned from `fetchPage` and a list\n * of container selectors to replace.\n *\n * @returns Whether all containers were replaced.\n */\nexport const replaceContent = function (\n\tthis: Swup,\n\t{ html }: PageData,\n\t{ containers }: { containers: Options['containers'] } = this.options\n): boolean {\n\tconst incomingDocument = new DOMParser().parseFromString(html, 'text/html');\n\n\t// Update browser title\n\tconst title = incomingDocument.querySelector('title')?.innerText || '';\n\tdocument.title = title;\n\n\t// Save persisted elements\n\tconst persistedElements = queryAll('[data-swup-persist]:not([data-swup-persist=\"\"])');\n\n\t// Update content containers\n\tconst replaced = containers\n\t\t.map((selector) => {\n\t\t\tconst currentEl = document.querySelector(selector);\n\t\t\tconst incomingEl = incomingDocument.querySelector(selector);\n\t\t\tif (currentEl && incomingEl) {\n\t\t\t\tcurrentEl.replaceWith(incomingEl);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (!currentEl) {\n\t\t\t\tconsole.warn(`[swup] Container missing in current document: ${selector}`);\n\t\t\t}\n\t\t\tif (!incomingEl) {\n\t\t\t\tconsole.warn(`[swup] Container missing in incoming document: ${selector}`);\n\t\t\t}\n\t\t\treturn false;\n\t\t})\n\t\t.filter(Boolean);\n\n\t// Restore persisted elements\n\tpersistedElements.forEach((existing) => {\n\t\tconst key = existing.getAttribute('data-swup-persist');\n\t\tconst replacement = query(`[data-swup-persist=\"${key}\"]`);\n\t\tif (replacement && replacement !== existing) {\n\t\t\treplacement.replaceWith(existing);\n\t\t}\n\t});\n\n\treturn replaced.length === containers.length;\n};\n","import Swup from '../Swup.js';\n\n/**\n * Update the scroll position after page render.\n * @returns Promise<boolean>\n */\nexport const scrollToContent = function (this: Swup): boolean {\n\tconst options: ScrollIntoViewOptions = { behavior: 'auto' };\n\tconst { target, reset } = this.visit.scroll;\n\tconst scrollTarget = target ?? this.visit.to.hash;\n\n\tlet scrolled = false;\n\n\tif (scrollTarget) {\n\t\tscrolled = this.hooks.callSync(\n\t\t\t'scroll:anchor',\n\t\t\t{ hash: scrollTarget, options },\n\t\t\t(visit, { hash, options }) => {\n\t\t\t\tconst anchor = this.getAnchorElement(hash);\n\t\t\t\tif (anchor) {\n\t\t\t\t\tanchor.scrollIntoView(options);\n\t\t\t\t}\n\t\t\t\treturn !!anchor;\n\t\t\t}\n\t\t);\n\t}\n\n\tif (reset && !scrolled) {\n\t\tscrolled = this.hooks.callSync('scroll:top', { options }, (visit, { options }) => {\n\t\t\twindow.scrollTo({ top: 0, left: 0, ...options });\n\t\t\treturn true;\n\t\t});\n\t}\n\n\treturn scrolled;\n};\n","import Swup from '../Swup.js';\nimport { nextTick } from '../utils.js';\n\n/**\n * Perform the in/enter animation of the next page.\n * @returns Promise<void>\n */\nexport const animatePageIn = async function (this: Swup) {\n\tif (!this.visit.animation.animate) {\n\t\treturn;\n\t}\n\n\tconst animation = this.hooks.call(\n\t\t'animation:in:await',\n\t\t{ skip: false },\n\t\tasync (visit, { skip }) => {\n\t\t\tif (skip) return;\n\t\t\tawait this.awaitAnimations({ selector: visit.animation.selector });\n\t\t}\n\t);\n\n\tawait nextTick();\n\n\tawait this.hooks.call('animation:in:start', undefined, () => {\n\t\tthis.classes.remove('is-animating');\n\t});\n\n\tawait animation;\n\n\tawait this.hooks.call('animation:in:end', undefined);\n};\n","import { updateHistoryRecord, getCurrentUrl, classify } from '../helpers.js';\nimport Swup from '../Swup.js';\nimport { PageData } from './fetchPage.js';\n\n/**\n * Render the next page: replace the content and update scroll position.\n */\nexport const renderPage = async function (this: Swup, page: PageData): Promise<void> {\n\tconst { url, html } = page;\n\n\tthis.classes.remove('is-leaving');\n\n\t// update state if the url was redirected\n\tif (!this.isSameResolvedUrl(getCurrentUrl(), url)) {\n\t\tupdateHistoryRecord(url);\n\t\tthis.currentPageUrl = getCurrentUrl();\n\t\tthis.visit.to.url = this.currentPageUrl;\n\t}\n\n\t// only add for animated page loads\n\tif (this.visit.animation.animate) {\n\t\tthis.classes.add('is-rendering');\n\t}\n\n\t// save html into visit context for easier retrieval\n\tthis.visit.to.html = html;\n\n\t// replace content: allow handlers and plugins to overwrite paga data and containers\n\tawait this.hooks.call('content:replace', { page }, (visit, { page }) => {\n\t\tconst success = this.replaceContent(page, { containers: visit.containers });\n\t\tif (!success) {\n\t\t\tthrow new Error('[swup] Container mismatch, aborting');\n\t\t}\n\t\tif (visit.animation.animate) {\n\t\t\t// Make sure to add these classes to new containers as well\n\t\t\tthis.classes.add('is-animating', 'is-changing', 'is-rendering');\n\t\t\tif (visit.animation.name) {\n\t\t\t\tthis.classes.add(`to-${classify(visit.animation.name)}`);\n\t\t\t}\n\t\t}\n\t});\n\n\t// scroll into view: either anchor or top of page\n\t// @ts-ignore: not returning a promise is intentional to allow users to pause in handler\n\tawait this.hooks.call('content:scroll', undefined, () => {\n\t\treturn this.scrollToContent();\n\t});\n\n\tawait this.hooks.call('page:view', { url: this.currentPageUrl, title: document.title });\n};\n","import Swup from '../Swup.js';\n\nexport type Plugin = {\n\t/** Identify as a swup plugin */\n\tisSwupPlugin: true;\n\t/** Name of this plugin */\n\tname: string;\n\t/** Version of this plugin. Currently not in use, defined here for backward compatiblity. */\n\tversion?: string;\n\t/** The swup instance that mounted this plugin */\n\tswup?: Swup;\n\t/** Version requirements of this plugin. Example: `{ swup: '>=4' }` */\n\trequires?: Record<string, string | string[]>;\n\t/** Run on mount */\n\tmount: () => void;\n\t/** Run on unmount */\n\tunmount: () => void;\n\t_beforeMount?: () => void;\n\t_afterUnmount?: () => void;\n\t_checkRequirements?: () => boolean;\n};\n\nconst isSwupPlugin = (maybeInvalidPlugin: unknown): maybeInvalidPlugin is Plugin => {\n\t// @ts-ignore: this might be anything, object or no\n\treturn Boolean(maybeInvalidPlugin?.isSwupPlugin);\n};\n\n/** Install a plugin. */\nexport const use = function (this: Swup, plugin: unknown) {\n\tif (!isSwupPlugin(plugin)) {\n\t\tconsole.error('Not a swup plugin instance', plugin);\n\t\treturn;\n\t}\n\n\tplugin.swup = this;\n\tif (plugin._checkRequirements) {\n\t\tif (!plugin._checkRequirements()) {\n\t\t\treturn;\n\t\t}\n\t}\n\tif (plugin._beforeMount) {\n\t\tplugin._beforeMount();\n\t}\n\tplugin.mount();\n\n\tthis.plugins.push(plugin);\n\n\treturn this.plugins;\n};\n\n/** Uninstall a plugin. */\nexport function unuse(this: Swup, pluginOrName: Plugin | string) {\n\tconst plugin = this.findPlugin(pluginOrName);\n\tif (!plugin) {\n\t\tconsole.error('No such plugin', plugin);\n\t\treturn;\n\t}\n\n\tplugin.unmount();\n\tif (plugin._afterUnmount) {\n\t\tplugin._afterUnmount();\n\t}\n\n\tthis.plugins = this.plugins.filter((p) => p !== plugin);\n\n\treturn this.plugins;\n}\n\n/** Find a plugin by name or reference. */\nexport function findPlugin(this: Swup, pluginOrName: Plugin | string) {\n\treturn this.plugins.find(\n\t\t(plugin) =>\n\t\t\tplugin === pluginOrName ||\n\t\t\tplugin.name === pluginOrName ||\n\t\t\tplugin.name === `Swup${String(pluginOrName)}`\n\t);\n}\n","import Swup from '../Swup.js';\n\n/**\n * Utility function to validate and run the global option 'resolveUrl'\n * @param {string} url\n * @returns {string} the resolved url\n */\nexport function resolveUrl(this: Swup, url: string): string {\n\tif (typeof this.options.resolveUrl !== 'function') {\n\t\tconsole.warn(`[swup] options.resolveUrl expects a callback function.`);\n\t\treturn url;\n\t}\n\tconst result = this.options.resolveUrl(url);\n\tif (!result || typeof result !== 'string') {\n\t\tconsole.warn(`[swup] options.resolveUrl needs to return a url`);\n\t\treturn url;\n\t}\n\tif (result.startsWith('//') || result.startsWith('http')) {\n\t\tconsole.warn(`[swup] options.resolveUrl needs to return a relative url`);\n\t\treturn url;\n\t}\n\treturn result;\n}\n\n/**\n * Compares the resolved version of two paths and returns true if they are the same\n * @param {string} url1\n * @param {string} url2\n * @returns {boolean}\n */\nexport function isSameResolvedUrl(this: Swup, url1: string, url2: string): boolean {\n\treturn this.resolveUrl(url1) === this.resolveUrl(url2);\n}\n","import { DelegateEvent } from 'delegate-it';\n\nimport version from './config/version.js';\n\nimport { delegateEvent, getCurrentUrl, Location, updateHistoryRecord } from './helpers.js';\nimport { DelegateEventUnsubscribe } from './helpers/delegateEvent.js';\n\nimport { Cache } from './modules/Cache.js';\nimport { Classes } from './modules/Classes.js';\nimport { Visit, createVisit } from './modules/Visit.js';\nimport { Hooks } from './modules/Hooks.js';\nimport { getAnchorElement } from './modules/getAnchorElement.js';\nimport { awaitAnimations } from './modules/awaitAnimations.js';\nimport { navigate, performNavigation, NavigationToSelfAction } from './modules/navigate.js';\nimport { fetchPage } from './modules/fetchPage.js';\nimport { animatePageOut } from './modules/animatePageOut.js';\nimport { replaceContent } from './modules/replaceContent.js';\nimport { scrollToContent } from './modules/scrollToContent.js';\nimport { animatePageIn } from './modules/animatePageIn.js';\nimport { renderPage } from './modules/renderPage.js';\nimport { use, unuse, findPlugin, Plugin } from './modules/plugins.js';\nimport { isSameResolvedUrl, resolveUrl } from './modules/resolveUrl.js';\nimport { nextTick } from './utils.js';\nimport { HistoryState } from './helpers/createHistoryRecord.js';\n\n/** Options for customizing swup's behavior. */\nexport type Options = {\n\t/** Whether history visits are animated. Default: `false` */\n\tanimateHistoryBrowsing: boolean;\n\t/** Selector for detecting animation timing. Default: `[class*=\"transition-\"]` */\n\tanimationSelector: string | false;\n\t/** Elements on which to add animation classes. Default: `html` element */\n\tanimationScope: 'html' | 'containers';\n\t/** Enable in-memory page cache. Default: `true` */\n\tcache: boolean;\n\t/** Content containers to be replaced on page visits. Default: `['#swup']` */\n\tcontainers: string[];\n\t/** Callback for ignoring visits. Receives the element and event that triggered the visit. */\n\tignoreVisit: (url: string, { el, event }: { el?: Element; event?: Event }) => boolean;\n\t/** Selector for links that trigger visits. Default: `'a[href]'` */\n\tlinkSelector: string;\n\t/** How swup handles links to the same page. Default: `scroll` */\n\tlinkToSelf: NavigationToSelfAction;\n\t/** Plugins to register on startup. */\n\tplugins: Plugin[];\n\t/** Custom headers sent along with fetch requests. */\n\trequestHeaders: Record<string, string>;\n\t/** Rewrite URLs before loading them. */\n\tresolveUrl: (url: string) => string;\n\t/** Callback for telling swup to ignore certain popstate events.  */\n\tskipPopStateHandling: (event: PopStateEvent) => boolean;\n};\n\nconst defaults: Options = {\n\tanimateHistoryBrowsing: false,\n\tanimationSelector: '[class*=\"transition-\"]',\n\tanimationScope: 'html',\n\tcache: true,\n\tcontainers: ['#swup'],\n\tignoreVisit: (url, { el } = {}) => !!el?.closest('[data-no-swup]'),\n\tlinkSelector: 'a[href]',\n\tlinkToSelf: 'scroll',\n\tplugins: [],\n\tresolveUrl: (url) => url,\n\trequestHeaders: {\n\t\t'X-Requested-With': 'swup',\n\t\t'Accept': 'text/html, application/xhtml+xml'\n\t},\n\tskipPopStateHandling: (event) => (event.state as HistoryState)?.source !== 'swup'\n};\n\n/** Swup page transition library. */\nexport default class Swup {\n\t/** Library version */\n\treadonly version: string = version;\n\t/** Options passed into the instance */\n\toptions: Options;\n\t/** Default options before merging user options */\n\treadonly defaults: Options = defaults;\n\t/** Registered plugin instances */\n\tplugins: Plugin[] = [];\n\t/** Data about the current visit */\n\tvisit: Visit;\n\t/** Cache instance */\n\treadonly cache: Cache;\n\t/** Hook registry */\n\treadonly hooks: Hooks;\n\t/** Animation class manager */\n\treadonly classes: Classes;\n\t/** URL of the currently visible page */\n\tcurrentPageUrl: string = getCurrentUrl();\n\t/** Index of the current history entry */\n\tprotected currentHistoryIndex: number;\n\t/** Delegated event subscription handle */\n\tprotected clickDelegate?: DelegateEventUnsubscribe;\n\n\t/** Install a plugin */\n\tuse = use;\n\t/** Uninstall a plugin */\n\tunuse = unuse;\n\t/** Find a plugin by name or instance */\n\tfindPlugin = findPlugin;\n\n\t/** Log a message. Has no effect unless debug plugin is installed */\n\tlog: (message: string, context?: unknown) => void = () => {};\n\n\t/** Navigate to a new URL */\n\tnavigate = navigate;\n\t/** Actually perform a navigation */\n\tprotected performNavigation = performNavigation;\n\t/** Create a new context for this visit */\n\tprotected createVisit = createVisit;\n\t/** Register a delegated event listener */\n\tdelegateEvent = delegateEvent;\n\t/** Fetch a page from the server */\n\tfetchPage = fetchPage;\n\t/** Resolve when animations on the page finish */\n\tawaitAnimations = awaitAnimations;\n\tprotected renderPage = renderPage;\n\t/** Replace the content after page load */\n\treplaceContent = replaceContent;\n\tprotected animatePageIn = animatePageIn;\n\tprotected animatePageOut = animatePageOut;\n\tprotected scrollToContent = scrollToContent;\n\t/** Find the anchor element for a given hash */\n\tgetAnchorElement = getAnchorElement;\n\n\t/** Get the current page URL */\n\tgetCurrentUrl = getCurrentUrl;\n\t/** Resolve a URL to its final location */\n\tresolveUrl = resolveUrl;\n\t/** Check if two URLs resolve to the same location */\n\tprotected isSameResolvedUrl = isSameResolvedUrl;\n\n\tconstructor(options: Partial<Options> = {}) {\n\t\t// Merge defaults and options\n\t\tthis.options = { ...this.defaults, ...options };\n\n\t\tthis.handleLinkClick = this.handleLinkClick.bind(this);\n\t\tthis.handlePopState = this.handlePopState.bind(this);\n\n\t\tthis.cache = new Cache(this);\n\t\tthis.classes = new Classes(this);\n\t\tthis.hooks = new Hooks(this);\n\t\tthis.visit = this.createVisit({ to: '' });\n\n\t\tthis.currentHistoryIndex = (history.state as HistoryState)?.index ?? 1;\n\n\t\tif (!this.checkRequirements()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.enable();\n\t}\n\n\tprotected checkRequirements() {\n\t\tif (typeof Promise === 'undefined') {\n\t\t\tconsole.warn('Promise is not supported');\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/** Enable this instance, adding listeners and classnames. */\n\tasync enable() {\n\t\t// Add event listener\n\t\tconst { linkSelector } = this.options;\n\t\tthis.clickDelegate = this.delegateEvent(linkSelector, 'click', this.handleLinkClick);\n\n\t\twindow.addEventListener('popstate', this.handlePopState);\n\n\t\t// Set scroll restoration to manual if animating history visits\n\t\tif (this.options.animateHistoryBrowsing) {\n\t\t\twindow.history.scrollRestoration = 'manual';\n\t\t}\n\n\t\t// Initial save to cache\n\t\tif (this.options.cache) {\n\t\t\t// Disabled to avoid caching modified dom state: logic moved to preload plugin\n\t\t\t// https://github.com/swup/swup/issues/475\n\t\t}\n\n\t\t// Mount plugins\n\t\tthis.options.plugins.forEach((plugin) => this.use(plugin));\n\n\t\t// Create initial history record\n\t\tif ((history.state as HistoryState)?.source !== 'swup') {\n\t\t\tupdateHistoryRecord(null, { index: this.currentHistoryIndex });\n\t\t}\n\n\t\t// Give consumers a chance to hook into enable\n\t\tawait nextTick();\n\n\t\t// Trigger enable hook\n\t\tawait this.hooks.call('enable', undefined, () => {\n\t\t\t// Add swup-enabled class to html tag\n\t\t\tdocument.documentElement.classList.add('swup-enabled');\n\t\t});\n\t}\n\n\t/** Disable this instance, removing listeners and classnames. */\n\tasync destroy() {\n\t\t// remove delegated listener\n\t\tthis.clickDelegate!.destroy();\n\n\t\t// remove popstate listener\n\t\twindow.removeEventListener('popstate', this.handlePopState);\n\n\t\t// empty cache\n\t\tthis.cache.clear();\n\n\t\t// unmount plugins\n\t\tthis.options.plugins.forEach((plugin) => this.unuse(plugin));\n\n\t\t// trigger disable hook\n\t\tawait this.hooks.call('disable', undefined, () => {\n\t\t\t// remove swup-enabled class from html tag\n\t\t\tdocument.documentElement.classList.remove('swup-enabled');\n\t\t});\n\n\t\t// remove handlers\n\t\tthis.hooks.clear();\n\t}\n\n\t/** Determine if a visit should be ignored by swup, based on URL or trigger element. */\n\tshouldIgnoreVisit(href: string, { el, event }: { el?: Element; event?: Event } = {}) {\n\t\tconst { origin, url, hash } = Location.fromUrl(href);\n\n\t\t// Ignore if the new origin doesn't match the current one\n\t\tif (origin !== window.location.origin) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Ignore if the link/form would open a new window (or none at all)\n\t\tif (el && this.triggerWillOpenNewWindow(el)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Ignore if the visit should be ignored as per user options\n\t\tif (this.options.ignoreVisit(url + hash, { el, event })) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Finally, allow the visit\n\t\treturn false;\n\t}\n\n\tprotected handleLinkClick(event: DelegateEvent<MouseEvent>) {\n\t\tconst el = event.delegateTarget as HTMLAnchorElement;\n\t\tconst { href, url, hash } = Location.fromElement(el);\n\n\t\t// Exit early if the link should be ignored\n\t\tif (this.shouldIgnoreVisit(href, { el, event })) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.visit = this.createVisit({ to: url, hash, el, event });\n\n\t\t// Exit early if control key pressed\n\t\tif (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) {\n\t\t\tthis.hooks.call('link:newtab', { href });\n\t\t\treturn;\n\t\t}\n\n\t\t// Exit early if other than left mouse button\n\t\tif (event.button !== 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.hooks.callSync('link:click', { el, event }, () => {\n\t\t\tconst from = this.visit.from.url ?? '';\n\n\t\t\tevent.preventDefault();\n\n\t\t\t// Handle links to the same page\n\t\t\tif (!url || url === from) {\n\t\t\t\tif (hash) {\n\t\t\t\t\t// With hash: scroll to anchor\n\t\t\t\t\tthis.hooks.callSync('link:anchor', { hash }, () => {\n\t\t\t\t\t\tupdateHistoryRecord(url + hash);\n\t\t\t\t\t\tthis.scrollToContent();\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// Without hash: scroll to top or load/reload page\n\t\t\t\t\tthis.hooks.callSync('link:self', undefined, () => {\n\t\t\t\t\t\tswitch (this.options.linkToSelf) {\n\t\t\t\t\t\t\tcase 'navigate':\n\t\t\t\t\t\t\t\treturn this.performNavigation();\n\t\t\t\t\t\t\tcase 'scroll':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tupdateHistoryRecord(url);\n\t\t\t\t\t\t\t\treturn this.scrollToContent();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Exit early if the resolved path hasn't changed\n\t\t\tif (this.isSameResolvedUrl(url, from)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Finally, proceed with loading the page\n\t\t\tthis.performNavigation();\n\t\t});\n\t}\n\n\tprotected handlePopState(event: PopStateEvent) {\n\t\tconst href: string = (event.state as HistoryState)?.url ?? location.href;\n\n\t\t// Exit early if this event should be ignored\n\t\tif (this.options.skipPopStateHandling(event)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Exit early if the resolved path hasn't changed\n\t\tif (this.isSameResolvedUrl(getCurrentUrl(), this.currentPageUrl)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { url, hash } = Location.fromUrl(href);\n\n\t\tthis.visit = this.createVisit({ to: url, hash, event });\n\n\t\t// Mark as history visit\n\t\tthis.visit.history.popstate = true;\n\n\t\t// Determine direction of history visit\n\t\tconst index = (event.state as HistoryState)?.index ?? 0;\n\t\tif (index && index !== this.currentHistoryIndex) {\n\t\t\tconst direction = index - this.currentHistoryIndex > 0 ? 'forwards' : 'backwards';\n\t\t\tthis.visit.history.direction = direction;\n\t\t\tthis.currentHistoryIndex = index;\n\t\t}\n\n\t\t// Disable animation & scrolling for history visits\n\t\tthis.visit.animation.animate = false;\n\t\tthis.visit.scroll.reset = false;\n\t\tthis.visit.scroll.target = false;\n\n\t\t// Animated history visit: re-enable animation & scroll reset\n\t\tif (this.options.animateHistoryBrowsing) {\n\t\t\tthis.visit.animation.animate = true;\n\t\t\tthis.visit.scroll.reset = true;\n\t\t}\n\n\t\t// Does this even do anything?\n\t\t// if (!hash) {\n\t\t// \tevent.preventDefault();\n\t\t// }\n\n\t\tthis.hooks.callSync('history:popstate', { event }, () => {\n\t\t\tthis.performNavigation();\n\t\t});\n\t}\n\n\t/** Determine whether an element will open a new tab when clicking/activating. */\n\tprotected triggerWillOpenNewWindow(triggerEl: Element) {\n\t\tif (triggerEl.matches('[download], [target=\"_blank\"]')) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n","type Comparator = '>' | '>=' | '<' | '<=';\n\n// Fill versions to exactly 3 decimals\nexport const normalizeVersion = (version: string): string => {\n\treturn String(version)\n\t\t.split('.')\n\t\t.map(segment => String(parseInt(segment || '0', 10)))\n\t\t.concat(['0', '0'])\n\t\t.slice(0, 3)\n\t\t.join('.');\n};\n\n// Numerically compare version strings after normalizing them\nexport const compareVersion = (a: string, b: string): number => {\n\ta = normalizeVersion(a);\n\tb = normalizeVersion(b);\n\treturn a.localeCompare(b, undefined, { numeric: true });\n};\n\n// Apply a comparator (equals, greater-than, etc) by its symbol to a sort comparison\nconst applyComparator = (comparisonResult: number, comparator: Comparator) => {\n\tconst comparators = {\n\t\t'': (r: number) => r === 0,\n\t\t'>': (r: number) => r > 0,\n\t\t'>=': (r: number) => r >= 0,\n\t\t'<': (r: number) => r < 0,\n\t\t'<=': (r: number) => r <= 0\n\t};\n\tconst comparatorFn = comparators[comparator] || comparators[''];\n\treturn comparatorFn(comparisonResult);\n};\n\n/**\n * Check if a version satisfies all given version requirements\n *\n * versionSatisfies('2.1.0', ['>=2', '<4']) // true\n * versionSatisfies('2.1.0', ['5']) // false\n *\n * @param {string} installed Installed version\n * @param {Array.<string>} requirements Array of requirements that must be satisfied\n * @returns boolean\n */\nexport const versionSatisfies = (installed: string, requirements: string[]) => {\n\treturn requirements.every((required) => {\n\t\tconst [, comparator, version] = required.match(/^([\\D]+)?(.*)$/) || [];\n\t\tconst comparisonResult = compareVersion(installed, version);\n\t\treturn applyComparator(comparisonResult, (comparator as Comparator) || '>=');\n\t});\n};\n","import type Swup from 'swup';\n\nimport { versionSatisfies } from './versionSatisfies.js';\n\nfunction getInstalledDependencyVersion(dependency: string, swup: Swup): string {\n\tif (dependency === 'swup') {\n\t\treturn swup.version ?? '';\n\t} else {\n\t\t// Circular type dependency?\n\t\t// findPlugin returns swup's Plugin type which is not up-to-date\n\t\t// with the actual Plugin type from index.ts\n\t\tconst plugin = swup.findPlugin(dependency);\n\t\treturn plugin?.version ?? '';\n\t}\n}\n\nexport function checkDependencyVersion(\n\tdependency: string,\n\trequirements: string[],\n\tswup: Swup\n): boolean {\n\tconst version = getInstalledDependencyVersion(dependency, swup);\n\tif (version) {\n\t\treturn versionSatisfies(version, requirements);\n\t} else {\n\t\treturn false;\n\t}\n}\n","import Plugin from '@swup/plugin';\n\nexport default class SwupScriptsPlugin extends Plugin {\n\tname = 'SwupScriptsPlugin';\n\n\trequires = {\n\t\tswup: '>=4',\n\t};\n\n\tdefaults = {\n\t\thead: true,\n\t\tbody: true,\n\t\toptin: false\n\t};\n\n\tconstructor(options = {}) {\n\t\tsuper();\n\t\tthis.options = { ...this.defaults, ...options };\n\t}\n\n\tmount() {\n\t\tthis.on('content:replace', this.runScripts);\n\t}\n\n\trunScripts() {\n\t\tconst { head, body, optin } = this.options;\n\t\tconst scope = this.getScope({ head, body });\n\t\tif (!scope) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selector = optin ? 'script[data-swup-reload-script]' : 'script:not([data-swup-ignore-script])';\n\t\tconst scripts = Array.from(scope.querySelectorAll(selector));\n\t\tscripts.forEach((script) => this.runScript(script));\n\n\t\tthis.swup.log(`Executed ${scripts.length} scripts.`);\n\t}\n\n\trunScript(script) {\n\t\tconst element = document.createElement('script');\n\t\tfor (const { name, value } of script.attributes) {\n\t\t\telement.setAttribute(name, value);\n\t\t}\n\t\telement.textContent = script.textContent;\n\t\tscript.replaceWith(element);\n\n\t\treturn element;\n\t}\n\n\tgetScope({ head, body }) {\n\t\tif (head && body) {\n\t\t\treturn document;\n\t\t}\n\t\tif (head) {\n\t\t\treturn document.head;\n\t\t}\n\t\tif (body) {\n\t\t\treturn document.body;\n\t\t}\n\t\treturn null;\n\t}\n}\n","import Swup from 'swup';\nimport SwupScriptsPlugin from '@swup/scripts-plugin';\n\nconst swup = new Swup({\n    plugins: [new SwupScriptsPlugin({\n        head: true,\n        body: true\n    })]\n});"]}